/* Generated By:JavaCC: Do not edit this line. SyntaxCheckerConstants.java */
package org.mariuszgromada.math.mxparser.syntaxchecker;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxCheckerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 5;
  /** RegularExpression Id. */
  int LETTER = 6;
  /** RegularExpression Id. */
  int DIGIT = 7;
  /** RegularExpression Id. */
  int DIGIT_B1 = 8;
  /** RegularExpression Id. */
  int DIGIT_B2 = 9;
  /** RegularExpression Id. */
  int DIGIT_B3 = 10;
  /** RegularExpression Id. */
  int DIGIT_B4 = 11;
  /** RegularExpression Id. */
  int DIGIT_B5 = 12;
  /** RegularExpression Id. */
  int DIGIT_B6 = 13;
  /** RegularExpression Id. */
  int DIGIT_B7 = 14;
  /** RegularExpression Id. */
  int DIGIT_B8 = 15;
  /** RegularExpression Id. */
  int DIGIT_B9 = 16;
  /** RegularExpression Id. */
  int DIGIT_B10 = 17;
  /** RegularExpression Id. */
  int DIGIT_B11 = 18;
  /** RegularExpression Id. */
  int DIGIT_B12 = 19;
  /** RegularExpression Id. */
  int DIGIT_B13 = 20;
  /** RegularExpression Id. */
  int DIGIT_B14 = 21;
  /** RegularExpression Id. */
  int DIGIT_B15 = 22;
  /** RegularExpression Id. */
  int DIGIT_B16 = 23;
  /** RegularExpression Id. */
  int DIGIT_B17 = 24;
  /** RegularExpression Id. */
  int DIGIT_B18 = 25;
  /** RegularExpression Id. */
  int DIGIT_B19 = 26;
  /** RegularExpression Id. */
  int DIGIT_B20 = 27;
  /** RegularExpression Id. */
  int DIGIT_B21 = 28;
  /** RegularExpression Id. */
  int DIGIT_B22 = 29;
  /** RegularExpression Id. */
  int DIGIT_B23 = 30;
  /** RegularExpression Id. */
  int DIGIT_B24 = 31;
  /** RegularExpression Id. */
  int DIGIT_B25 = 32;
  /** RegularExpression Id. */
  int DIGIT_B26 = 33;
  /** RegularExpression Id. */
  int DIGIT_B27 = 34;
  /** RegularExpression Id. */
  int DIGIT_B28 = 35;
  /** RegularExpression Id. */
  int DIGIT_B29 = 36;
  /** RegularExpression Id. */
  int DIGIT_B30 = 37;
  /** RegularExpression Id. */
  int DIGIT_B31 = 38;
  /** RegularExpression Id. */
  int DIGIT_B32 = 39;
  /** RegularExpression Id. */
  int DIGIT_B33 = 40;
  /** RegularExpression Id. */
  int DIGIT_B34 = 41;
  /** RegularExpression Id. */
  int DIGIT_B35 = 42;
  /** RegularExpression Id. */
  int DIGIT_B36 = 43;
  /** RegularExpression Id. */
  int LETTERS = 44;
  /** RegularExpression Id. */
  int INTEGER = 45;
  /** RegularExpression Id. */
  int LEFT_PAR = 46;
  /** RegularExpression Id. */
  int RIGHT_PAR = 47;
  /** RegularExpression Id. */
  int PLUS = 48;
  /** RegularExpression Id. */
  int MINUS = 49;
  /** RegularExpression Id. */
  int MULTIPLY = 50;
  /** RegularExpression Id. */
  int DIV = 51;
  /** RegularExpression Id. */
  int POWER = 52;
  /** RegularExpression Id. */
  int MODULO = 53;
  /** RegularExpression Id. */
  int FACTORIAL = 54;
  /** RegularExpression Id. */
  int PERCENTAGE = 55;
  /** RegularExpression Id. */
  int COMMA = 56;
  /** RegularExpression Id. */
  int SEMICOLON = 57;
  /** RegularExpression Id. */
  int EQ = 58;
  /** RegularExpression Id. */
  int UNIT = 59;
  /** RegularExpression Id. */
  int NEQ = 60;
  /** RegularExpression Id. */
  int LT = 61;
  /** RegularExpression Id. */
  int LEQ = 62;
  /** RegularExpression Id. */
  int GT = 63;
  /** RegularExpression Id. */
  int GEQ = 64;
  /** RegularExpression Id. */
  int OR = 65;
  /** RegularExpression Id. */
  int AND = 66;
  /** RegularExpression Id. */
  int NOT = 67;
  /** RegularExpression Id. */
  int BITNOT = 68;
  /** RegularExpression Id. */
  int IMP = 69;
  /** RegularExpression Id. */
  int CIMP = 70;
  /** RegularExpression Id. */
  int NIMP = 71;
  /** RegularExpression Id. */
  int CNIMP = 72;
  /** RegularExpression Id. */
  int NAND = 73;
  /** RegularExpression Id. */
  int EQV = 74;
  /** RegularExpression Id. */
  int NOR = 75;
  /** RegularExpression Id. */
  int BITWISE = 76;
  /** RegularExpression Id. */
  int XOR = 77;
  /** RegularExpression Id. */
  int CHAR = 78;
  /** RegularExpression Id. */
  int DEC_FRACT = 79;
  /** RegularExpression Id. */
  int DEC_FRACT_OR_INT = 80;
  /** RegularExpression Id. */
  int DECIMAL = 81;
  /** RegularExpression Id. */
  int BASE1 = 82;
  /** RegularExpression Id. */
  int BASE2 = 83;
  /** RegularExpression Id. */
  int BASE3 = 84;
  /** RegularExpression Id. */
  int BASE4 = 85;
  /** RegularExpression Id. */
  int BASE5 = 86;
  /** RegularExpression Id. */
  int BASE6 = 87;
  /** RegularExpression Id. */
  int BASE7 = 88;
  /** RegularExpression Id. */
  int BASE8 = 89;
  /** RegularExpression Id. */
  int BASE9 = 90;
  /** RegularExpression Id. */
  int BASE10 = 91;
  /** RegularExpression Id. */
  int BASE11 = 92;
  /** RegularExpression Id. */
  int BASE12 = 93;
  /** RegularExpression Id. */
  int BASE13 = 94;
  /** RegularExpression Id. */
  int BASE14 = 95;
  /** RegularExpression Id. */
  int BASE15 = 96;
  /** RegularExpression Id. */
  int BASE16 = 97;
  /** RegularExpression Id. */
  int BASE17 = 98;
  /** RegularExpression Id. */
  int BASE18 = 99;
  /** RegularExpression Id. */
  int BASE19 = 100;
  /** RegularExpression Id. */
  int BASE20 = 101;
  /** RegularExpression Id. */
  int BASE21 = 102;
  /** RegularExpression Id. */
  int BASE22 = 103;
  /** RegularExpression Id. */
  int BASE23 = 104;
  /** RegularExpression Id. */
  int BASE24 = 105;
  /** RegularExpression Id. */
  int BASE25 = 106;
  /** RegularExpression Id. */
  int BASE26 = 107;
  /** RegularExpression Id. */
  int BASE27 = 108;
  /** RegularExpression Id. */
  int BASE28 = 109;
  /** RegularExpression Id. */
  int BASE29 = 110;
  /** RegularExpression Id. */
  int BASE30 = 111;
  /** RegularExpression Id. */
  int BASE31 = 112;
  /** RegularExpression Id. */
  int BASE32 = 113;
  /** RegularExpression Id. */
  int BASE33 = 114;
  /** RegularExpression Id. */
  int BASE34 = 115;
  /** RegularExpression Id. */
  int BASE35 = 116;
  /** RegularExpression Id. */
  int BASE36 = 117;
  /** RegularExpression Id. */
  int BINARY = 118;
  /** RegularExpression Id. */
  int OCTAL = 119;
  /** RegularExpression Id. */
  int HEXADECIMAL = 120;
  /** RegularExpression Id. */
  int FRACTION = 121;
  /** RegularExpression Id. */
  int IDENTIFIER = 122;
  /** RegularExpression Id. */
  int FUNCTION = 123;
  /** RegularExpression Id. */
  int INVALID_TOKEN = 126;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 127;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<WHITESPACE>",
    "<LETTER>",
    "<DIGIT>",
    "\"1\"",
    "<DIGIT_B2>",
    "<DIGIT_B3>",
    "<DIGIT_B4>",
    "<DIGIT_B5>",
    "<DIGIT_B6>",
    "<DIGIT_B7>",
    "<DIGIT_B8>",
    "<DIGIT_B9>",
    "<DIGIT_B10>",
    "<DIGIT_B11>",
    "<DIGIT_B12>",
    "<DIGIT_B13>",
    "<DIGIT_B14>",
    "<DIGIT_B15>",
    "<DIGIT_B16>",
    "<DIGIT_B17>",
    "<DIGIT_B18>",
    "<DIGIT_B19>",
    "<DIGIT_B20>",
    "<DIGIT_B21>",
    "<DIGIT_B22>",
    "<DIGIT_B23>",
    "<DIGIT_B24>",
    "<DIGIT_B25>",
    "<DIGIT_B26>",
    "<DIGIT_B27>",
    "<DIGIT_B28>",
    "<DIGIT_B29>",
    "<DIGIT_B30>",
    "<DIGIT_B31>",
    "<DIGIT_B32>",
    "<DIGIT_B33>",
    "<DIGIT_B34>",
    "<DIGIT_B35>",
    "<DIGIT_B36>",
    "<LETTERS>",
    "<INTEGER>",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"#\"",
    "\"!\"",
    "\"%\"",
    "\",\"",
    "\";\"",
    "<EQ>",
    "<UNIT>",
    "<NEQ>",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "<OR>",
    "<AND>",
    "\"~\"",
    "\"@~\"",
    "\"-->\"",
    "\"<--\"",
    "\"-/>\"",
    "\"</-\"",
    "<NAND>",
    "\"<->\"",
    "<NOR>",
    "<BITWISE>",
    "\"(+)\"",
    "<CHAR>",
    "<DEC_FRACT>",
    "<DEC_FRACT_OR_INT>",
    "<DECIMAL>",
    "<BASE1>",
    "<BASE2>",
    "<BASE3>",
    "<BASE4>",
    "<BASE5>",
    "<BASE6>",
    "<BASE7>",
    "<BASE8>",
    "<BASE9>",
    "<BASE10>",
    "<BASE11>",
    "<BASE12>",
    "<BASE13>",
    "<BASE14>",
    "<BASE15>",
    "<BASE16>",
    "<BASE17>",
    "<BASE18>",
    "<BASE19>",
    "<BASE20>",
    "<BASE21>",
    "<BASE22>",
    "<BASE23>",
    "<BASE24>",
    "<BASE25>",
    "<BASE26>",
    "<BASE27>",
    "<BASE28>",
    "<BASE29>",
    "<BASE30>",
    "<BASE31>",
    "<BASE32>",
    "<BASE33>",
    "<BASE34>",
    "<BASE35>",
    "<BASE36>",
    "<BINARY>",
    "<OCTAL>",
    "<HEXADECIMAL>",
    "<FRACTION>",
    "<IDENTIFIER>",
    "<FUNCTION>",
    "\"[\"",
    "\"]\"",
    "<INVALID_TOKEN>",
    "<UNEXPECTED_CHAR>",
  };

}
